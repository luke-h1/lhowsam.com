name: Destroy ECS

on:
  workflow_dispatch:

env:
  TERRAFORM_ROOT: ./terraform/staging
  DOCKER_ENV: production
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_SANITY_PROJECT_ID }}
  BASIC_AUTH_USER: ${{ secrets.BASIC_AUTH_USER }}
  BASIC_AUTH_PASSWORD: ${{ secrets.BASIC_AUTH_PASSWORD }}
  SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  NEXT_PUBLIC_SENTRY_DSN: ${{ secrets.NEXT_PUBLIC_SENTRY_DSN }}  
  PNPM_VERSION: 8.13.1
  TF_VAR_docker_image_tag: ${{ github.sha }}
  TF_VAR_next_public_sanity_project_id: ${{ secrets.NEXT_PUBLIC_SANITY_PROJECT_ID }}
  TF_VAR_next_public_url: "https://staging.lhowsam.com"
  TF_VAR_spotify_client_id: ${{ secrets.SPOTIFY_CLIENT_ID }}
  TF_VAR_spotify_client_secret: ${{ secrets.SPOTIFY_CLIENT_SECRET }}
  TF_VAR_spotify_refresh_token: ${{ secrets.SPOTIFY_REFRESH_TOKEN }}
  TF_VAR_next_public_ga_tracking_id: ""
  TF_VAR_next_public_new_relic_license_key: ""
  TF_VAR_next_public_new_relic_application_id: ""
  TF_VAR_basic_auth_password: ""
  TF_VAR_basic_auth_user: ""
  TF_VAR_domain: "lhowsam.com"
  TF_VAR_project_name: "lhowsam"
  TF_VAR_environment: "staging"
jobs:
  destroy:
    name: Destroy ECS
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@master

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.8
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.TERRAFORM_ROOT }}

      - name: Destroy Terraform Infrastructure
        run: terraform destroy -input=false -auto-approve
        working-directory: ${{ env.TERRAFORM_ROOT }}

      - name: Cleanup State (Optional)
        if: always()
        run: |
          echo "Cleanup after destroying infrastructure."

      - name: Terraform Init
        run: terraform init
        working-directory: terraform/module

      - name: Destroy Terraform Infrastructure
        run: terraform destroy -input=false -auto-approve
        working-directory: terraform/module
